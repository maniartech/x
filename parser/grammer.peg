{
  //
  // Inspired from pegjs excel formula parser:
  //
  // References:
  // https://pkg.go.dev/github.com/mna/pigeon - Docs
  // https://github.com/pegjs/pegjs/blob/master/examples/arithmetics.pegjs - Arithmetics
  // https://github.com/mna/pigeon/blob/master/examples/json/json.peg - JSON
  // https://www.mailgun.com/blog/how-we-built-a-lucene-inspired-parser-in-go/ - Lucene
  // https://gist.github.com/gamerxl/cf5184a437b10d0f86197b102cf1255a - Excel Formula
  // https://mrcsparker.wordpress.com/2015/07/26/excel-formula-grammar-for-peg-js/ - Excel Formula
  //

  package parser

}

// Starting point of the parser
Input <- expr:Expr EOF {
    return expr, nil
}

// The expression
Expr <- _ first:Term rest:( _ ( AddOp / CompOp ) _ Term )* _ {
    return parse(0, 0, first, rest), nil
}

Term <- first:Factor rest:( _ MulOp _ Factor )* {
    return parse(0, 0, first, rest), nil
}

Function <- fn:AlphaNum+ _ '(' _ args:Args? ')' {
    fnName := toString(fn)
    // return getFunctionNode(0, 0, fnName, args.([]interface{})...), nil
    return NewFunctionNode(0, 0, fnName, args.([]Node)), nil
}

Args <- first:Expr rest:( _ "," _ Expr )* {
    slice := toIfaceSlice(rest)
    if slice == nil {
        return []Node{}, nil
    }

    args := make([]interface{}, len(slice)+1)
    args[0] = parse(0, 0, first, nil)
    for i, arg := range slice {
        val := parse(0, 0, arg.([]interface{})[3], nil)
		args[i+1] = val
    }

    return toNodeSlice(args), nil
}

Factor <- '(' expr:Expr ')' {
    return expr, nil
} / value:Value {
    return value, nil
}

AddOp <- ( "+" / "-" ) {
    return string(c.text), nil
}

MulOp <- ( "*" / "/" ) {
    return string(c.text), nil
}

CompOp <- ("=" / "<>" / "<=" / "<" / ">=" / ">") {
  return c.text, nil
}

Value <- val:( Object / Array / Number / String / Bool / Null / Function ) _ {
    return val, nil
}

Object <- '{' _ vals:( String _ ':' _ Expr ( ',' _ String _ ':' _ Expr )* )? '}' {
    // res := make(map[string]interface{})
    valsSl := toIfaceSlice(vals)
    res := make([]ObjectItem, 0, len(valsSl))
    if len(valsSl) == 0 {
        return NewObjectNode(c.pos.line, c.pos.col, res), nil
    }
    // res[valsSl[0].(string)] = valsSl[4]
    res = append(res, ObjectItem{ Key: valsSl[0].(StringNode).Value, Value: valsSl[4].(Node) })

    restSl := toIfaceSlice(valsSl[5])
    for _, v := range restSl {
        vSl := toIfaceSlice(v)
        // res[vSl[2].(string)] = vSl[6]
        res = append(res, ObjectItem{ Key: vSl[2].(StringNode).Value, Value: vSl[6].(Node) })
    }
    return NewObjectNode(c.pos.line, c.pos.col, res), nil
}

Array <- '[' _ vals:( Expr ( ',' _ Expr )* )? ']' {
    valsSl := toIfaceSlice(vals)
    if len(valsSl) == 0 {
        return NewArrayNode(c.pos.line, c.pos.col, []Node{}), nil
    }
    res := []interface{}{valsSl[0]}
    restSl := toIfaceSlice(valsSl[1])
    for _, v := range restSl {
        vSl := toIfaceSlice(v)
        res = append(res, vSl[2])
    }
    return NewArrayNode(c.pos.line, c.pos.col, toNodeSlice(res)), nil
}

///////////////////// Number /////////////////////

Number <- Integer ( '.' DecimalDigit+ )? Exponent? {
    // JSON numbers have the same syntax as Go, and are parseable using
    // strconv.ParseFloat
    value, err := strconv.ParseFloat(string(c.text), 64)
    return NewNumberNode(c.pos.line, c.pos.col, Number(value)), err
}

Integer <- [+-]? DecimalDigit+ {
    return strconv.Atoi(string(c.text))
}

Exponent <- 'e'i [+-]? DecimalDigit+

DecimalDigit <- [0-9]

AlphaNum <- [A-Za-z0-9]

/////////////////// Strings ////////////////

String <- DoubleQuoteString / SingleQuoteString

// Identifier <- AlphaNum+ {
//     return c.text
// }

DoubleQuoteString <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    value, err := strconv.Unquote(string(c.text))
    return NewStringNode(c.pos.line, c.pos.col, value), err
}

SingleQuoteString <- "'" str:PlainString "'" {
    return NewStringNode(c.pos.line, c.pos.col, str.(string)), nil
}

PlainString <- ( !EscapedChar . / '\\' EscapeSequence )* {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return string(c.text), nil
}

EscapedChar <- [\x00-\x1f"'\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

HexDigit <- [0-9a-f]i

Bool <- "true" {
    return NewBooleanNode(c.pos.line, c.pos.col, true), nil
} / "false" {
    return NewBooleanNode(c.pos.line, c.pos.col, false), nil
}

Null <- "null" {
    return NewNullNode(c.pos.line, c.pos.col), nil
}

_ "whitespace" <- [ \n\t\r]*

EOF <- !.
