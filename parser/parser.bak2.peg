// Code generated by pigeon; DO NOT EDIT.


  // Command calculator is a small PEG-generated parser that computes
  // simple math using numbers.
  //
  // Example usage: $ calculator "3 + (2 - 5 * 12)"
  //
  // Inspired by pegjs arithmetic example:
  // https://github.com/pegjs/pegjs/blob/master/examples/arithmetics.pegjs
  //
  // Inspired from pegjs excel formula parser:
  // https://gist.github.com/gamerxl/cf5184a437b10d0f86197b102cf1255a
  //

  package parser

  import strings


var g = &grammar {
	rules: []*rule{
{
	name: "Input",
	pos: position{line: 21, col: 1, offset: 472},
	expr: &actionExpr{
	pos: position{line: 21, col: 10, offset: 481},
	run: (*parser).callonInput1,
	expr: &seqExpr{
	pos: position{line: 21, col: 10, offset: 481},
	exprs: []interface{}{
&labeledExpr{
	pos: position{line: 21, col: 10, offset: 481},
	label: "expr",
	expr: &ruleRefExpr{
	pos: position{line: 21, col: 15, offset: 486},
	name: "Expr",
},
},
&ruleRefExpr{
	pos: position{line: 21, col: 20, offset: 491},
	name: "EOF",
},
	},
},
},
},
{
	name: "Arguments",
	pos: position{line: 26, col: 1, offset: 546},
	expr: &actionExpr{
	pos: position{line: 26, col: 14, offset: 559},
	run: (*parser).callonArguments1,
	expr: &seqExpr{
	pos: position{line: 26, col: 14, offset: 559},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 26, col: 14, offset: 559},
	val: "(",
	ignoreCase: false,
	want: "\"(\"",
},
&ruleRefExpr{
	pos: position{line: 26, col: 18, offset: 563},
	name: "_",
},
&labeledExpr{
	pos: position{line: 26, col: 20, offset: 565},
	label: "arguments",
	expr: &zeroOrOneExpr{
	pos: position{line: 26, col: 30, offset: 575},
	expr: &ruleRefExpr{
	pos: position{line: 26, col: 30, offset: 575},
	name: "ArgumentList",
},
},
},
&ruleRefExpr{
	pos: position{line: 26, col: 44, offset: 589},
	name: "_",
},
&litMatcher{
	pos: position{line: 26, col: 46, offset: 591},
	val: ")",
	ignoreCase: false,
	want: "\")\"",
},
	},
},
},
},
{
	name: "ArgumentList",
	pos: position{line: 34, col: 1, offset: 717},
	expr: &actionExpr{
	pos: position{line: 34, col: 17, offset: 733},
	run: (*parser).callonArgumentList1,
	expr: &seqExpr{
	pos: position{line: 34, col: 17, offset: 733},
	exprs: []interface{}{
&labeledExpr{
	pos: position{line: 34, col: 17, offset: 733},
	label: "head",
	expr: &ruleRefExpr{
	pos: position{line: 34, col: 22, offset: 738},
	name: "Expression",
},
},
&labeledExpr{
	pos: position{line: 34, col: 33, offset: 749},
	label: "tail",
	expr: &zeroOrMoreExpr{
	pos: position{line: 34, col: 38, offset: 754},
	expr: &seqExpr{
	pos: position{line: 34, col: 39, offset: 755},
	exprs: []interface{}{
&ruleRefExpr{
	pos: position{line: 34, col: 39, offset: 755},
	name: "_",
},
&litMatcher{
	pos: position{line: 34, col: 41, offset: 757},
	val: ",",
	ignoreCase: false,
	want: "\",\"",
},
&ruleRefExpr{
	pos: position{line: 34, col: 45, offset: 761},
	name: "_",
},
&ruleRefExpr{
	pos: position{line: 34, col: 47, offset: 763},
	name: "Expr",
},
	},
},
},
},
	},
},
},
},
{
	name: "Variable",
	pos: position{line: 42, col: 1, offset: 889},
	expr: &actionExpr{
	pos: position{line: 42, col: 13, offset: 901},
	run: (*parser).callonVariable1,
	expr: &seqExpr{
	pos: position{line: 42, col: 13, offset: 901},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 42, col: 13, offset: 901},
	val: "'",
	ignoreCase: false,
	want: "\"'\"",
},
&labeledExpr{
	pos: position{line: 42, col: 17, offset: 905},
	label: "name",
	expr: &ruleRefExpr{
	pos: position{line: 42, col: 22, offset: 910},
	name: "IdentifierVariable",
},
},
	},
},
},
},
{
	name: "IdentifierVariable",
	pos: position{line: 46, col: 1, offset: 966},
	expr: &actionExpr{
	pos: position{line: 46, col: 23, offset: 988},
	run: (*parser).callonIdentifierVariable1,
	expr: &labeledExpr{
	pos: position{line: 46, col: 23, offset: 988},
	label: "name",
	expr: &ruleRefExpr{
	pos: position{line: 46, col: 28, offset: 993},
	name: "Identifier",
},
},
},
},
{
	name: "Identifier",
	pos: position{line: 50, col: 1, offset: 1028},
	expr: &actionExpr{
	pos: position{line: 50, col: 15, offset: 1042},
	run: (*parser).callonIdentifier1,
	expr: &labeledExpr{
	pos: position{line: 50, col: 15, offset: 1042},
	label: "name",
	expr: &ruleRefExpr{
	pos: position{line: 50, col: 20, offset: 1047},
	name: "IdentifierName",
},
},
},
},
{
	name: "IdentifierName",
	pos: position{line: 54, col: 1, offset: 1085},
	expr: &actionExpr{
	pos: position{line: 55, col: 5, offset: 1105},
	run: (*parser).callonIdentifierName1,
	expr: &seqExpr{
	pos: position{line: 55, col: 5, offset: 1105},
	exprs: []interface{}{
&labeledExpr{
	pos: position{line: 55, col: 5, offset: 1105},
	label: "start",
	expr: &ruleRefExpr{
	pos: position{line: 55, col: 11, offset: 1111},
	name: "IdentifierStart",
},
},
&labeledExpr{
	pos: position{line: 55, col: 27, offset: 1127},
	label: "parts",
	expr: &zeroOrMoreExpr{
	pos: position{line: 55, col: 33, offset: 1133},
	expr: &ruleRefExpr{
	pos: position{line: 55, col: 33, offset: 1133},
	name: "IdentifierPart",
},
},
},
	},
},
},
},
{
	name: "IdentifierStart",
	pos: position{line: 58, col: 1, offset: 1197},
	expr: &choiceExpr{
	pos: position{line: 59, col: 5, offset: 1218},
	alternatives: []interface{}{
&ruleRefExpr{
	pos: position{line: 59, col: 5, offset: 1218},
	name: "Alpha",
},
&litMatcher{
	pos: position{line: 60, col: 5, offset: 1229},
	val: "$",
	ignoreCase: false,
	want: "\"$\"",
},
&litMatcher{
	pos: position{line: 61, col: 5, offset: 1238},
	val: "_",
	ignoreCase: false,
	want: "\"_\"",
},
	},
},
},
{
	name: "IdentifierPart",
	pos: position{line: 62, col: 1, offset: 1243},
	expr: &choiceExpr{
	pos: position{line: 63, col: 5, offset: 1263},
	alternatives: []interface{}{
&ruleRefExpr{
	pos: position{line: 63, col: 5, offset: 1263},
	name: "IdentifierStart",
},
&ruleRefExpr{
	pos: position{line: 64, col: 5, offset: 1284},
	name: "Digit",
},
	},
},
},
{
	name: "AlphaNumeric",
	pos: position{line: 65, col: 1, offset: 1291},
	expr: &zeroOrMoreExpr{
	pos: position{line: 66, col: 5, offset: 1309},
	expr: &choiceExpr{
	pos: position{line: 66, col: 6, offset: 1310},
	alternatives: []interface{}{
&litMatcher{
	pos: position{line: 66, col: 6, offset: 1310},
	val: "&",
	ignoreCase: false,
	want: "\"&\"",
},
&litMatcher{
	pos: position{line: 66, col: 12, offset: 1316},
	val: "–",
	ignoreCase: false,
	want: "\"–\"",
},
&litMatcher{
	pos: position{line: 66, col: 18, offset: 1324},
	val: "_",
	ignoreCase: false,
	want: "\"_\"",
},
&litMatcher{
	pos: position{line: 66, col: 24, offset: 1330},
	val: " ",
	ignoreCase: false,
	want: "\" \"",
},
&charClassMatcher{
	pos: position{line: 66, col: 30, offset: 1336},
	val: "[a–z]",
	chars: []rune{'a','–','z',},
	ignoreCase: false,
	inverted: false,
},
&charClassMatcher{
	pos: position{line: 66, col: 38, offset: 1346},
	val: "[A–Z]",
	chars: []rune{'A','–','Z',},
	ignoreCase: false,
	inverted: false,
},
	},
},
},
},
{
	name: "Alpha",
	pos: position{line: 68, col: 1, offset: 1359},
	expr: &charClassMatcher{
	pos: position{line: 69, col: 5, offset: 1370},
	val: "[a–zA–Z]",
	chars: []rune{'a','–','z','A','–','Z',},
	ignoreCase: false,
	inverted: false,
},
},
{
	name: "Expr",
	pos: position{line: 73, col: 1, offset: 1433},
	expr: &actionExpr{
	pos: position{line: 73, col: 9, offset: 1441},
	run: (*parser).callonExpr1,
	expr: &seqExpr{
	pos: position{line: 73, col: 9, offset: 1441},
	exprs: []interface{}{
&ruleRefExpr{
	pos: position{line: 73, col: 9, offset: 1441},
	name: "_",
},
&labeledExpr{
	pos: position{line: 73, col: 11, offset: 1443},
	label: "first",
	expr: &ruleRefExpr{
	pos: position{line: 73, col: 17, offset: 1449},
	name: "Term",
},
},
&labeledExpr{
	pos: position{line: 73, col: 22, offset: 1454},
	label: "rest",
	expr: &zeroOrMoreExpr{
	pos: position{line: 73, col: 27, offset: 1459},
	expr: &seqExpr{
	pos: position{line: 73, col: 29, offset: 1461},
	exprs: []interface{}{
&ruleRefExpr{
	pos: position{line: 73, col: 29, offset: 1461},
	name: "_",
},
&ruleRefExpr{
	pos: position{line: 73, col: 31, offset: 1463},
	name: "AddOp",
},
&ruleRefExpr{
	pos: position{line: 73, col: 37, offset: 1469},
	name: "_",
},
&ruleRefExpr{
	pos: position{line: 73, col: 39, offset: 1471},
	name: "Term",
},
	},
},
},
},
&ruleRefExpr{
	pos: position{line: 73, col: 47, offset: 1479},
	name: "_",
},
	},
},
},
},
{
	name: "Term",
	pos: position{line: 78, col: 1, offset: 1545},
	expr: &actionExpr{
	pos: position{line: 78, col: 9, offset: 1553},
	run: (*parser).callonTerm1,
	expr: &seqExpr{
	pos: position{line: 78, col: 9, offset: 1553},
	exprs: []interface{}{
&labeledExpr{
	pos: position{line: 78, col: 9, offset: 1553},
	label: "first",
	expr: &ruleRefExpr{
	pos: position{line: 78, col: 15, offset: 1559},
	name: "Factor",
},
},
&labeledExpr{
	pos: position{line: 78, col: 22, offset: 1566},
	label: "rest",
	expr: &zeroOrMoreExpr{
	pos: position{line: 78, col: 27, offset: 1571},
	expr: &seqExpr{
	pos: position{line: 78, col: 29, offset: 1573},
	exprs: []interface{}{
&ruleRefExpr{
	pos: position{line: 78, col: 29, offset: 1573},
	name: "_",
},
&ruleRefExpr{
	pos: position{line: 78, col: 31, offset: 1575},
	name: "MulOp",
},
&ruleRefExpr{
	pos: position{line: 78, col: 37, offset: 1581},
	name: "_",
},
&ruleRefExpr{
	pos: position{line: 78, col: 39, offset: 1583},
	name: "Factor",
},
	},
},
},
},
	},
},
},
},
{
	name: "Factor",
	pos: position{line: 83, col: 1, offset: 1657},
	expr: &choiceExpr{
	pos: position{line: 83, col: 11, offset: 1667},
	alternatives: []interface{}{
&actionExpr{
	pos: position{line: 83, col: 11, offset: 1667},
	run: (*parser).callonFactor2,
	expr: &seqExpr{
	pos: position{line: 83, col: 11, offset: 1667},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 83, col: 11, offset: 1667},
	val: "(",
	ignoreCase: false,
	want: "\"(\"",
},
&labeledExpr{
	pos: position{line: 83, col: 15, offset: 1671},
	label: "expr",
	expr: &ruleRefExpr{
	pos: position{line: 83, col: 20, offset: 1676},
	name: "Expr",
},
},
&litMatcher{
	pos: position{line: 83, col: 25, offset: 1681},
	val: ")",
	ignoreCase: false,
	want: "\")\"",
},
	},
},
},
&actionExpr{
	pos: position{line: 86, col: 5, offset: 1735},
	run: (*parser).callonFactor8,
	expr: &labeledExpr{
	pos: position{line: 86, col: 5, offset: 1735},
	label: "number",
	expr: &ruleRefExpr{
	pos: position{line: 86, col: 12, offset: 1742},
	name: "Number",
},
},
},
	},
},
},
{
	name: "AddOp",
	pos: position{line: 91, col: 1, offset: 1802},
	expr: &actionExpr{
	pos: position{line: 91, col: 10, offset: 1811},
	run: (*parser).callonAddOp1,
	expr: &choiceExpr{
	pos: position{line: 91, col: 12, offset: 1813},
	alternatives: []interface{}{
&litMatcher{
	pos: position{line: 91, col: 12, offset: 1813},
	val: "+",
	ignoreCase: false,
	want: "\"+\"",
},
&litMatcher{
	pos: position{line: 91, col: 18, offset: 1819},
	val: "-",
	ignoreCase: false,
	want: "\"-\"",
},
	},
},
},
},
{
	name: "MulOp",
	pos: position{line: 96, col: 1, offset: 1886},
	expr: &actionExpr{
	pos: position{line: 96, col: 10, offset: 1895},
	run: (*parser).callonMulOp1,
	expr: &choiceExpr{
	pos: position{line: 96, col: 12, offset: 1897},
	alternatives: []interface{}{
&litMatcher{
	pos: position{line: 96, col: 12, offset: 1897},
	val: "*",
	ignoreCase: false,
	want: "\"*\"",
},
&litMatcher{
	pos: position{line: 96, col: 18, offset: 1903},
	val: "/",
	ignoreCase: false,
	want: "\"/\"",
},
	},
},
},
},
{
	name: "CompOp",
	pos: position{line: 102, col: 1, offset: 1972},
	expr: &actionExpr{
	pos: position{line: 102, col: 11, offset: 1982},
	run: (*parser).callonCompOp1,
	expr: &choiceExpr{
	pos: position{line: 102, col: 12, offset: 1983},
	alternatives: []interface{}{
&litMatcher{
	pos: position{line: 102, col: 12, offset: 1983},
	val: "=",
	ignoreCase: false,
	want: "\"=\"",
},
&litMatcher{
	pos: position{line: 102, col: 18, offset: 1989},
	val: "<>",
	ignoreCase: false,
	want: "\"<>\"",
},
&litMatcher{
	pos: position{line: 102, col: 25, offset: 1996},
	val: "<",
	ignoreCase: false,
	want: "\"<\"",
},
&litMatcher{
	pos: position{line: 102, col: 31, offset: 2002},
	val: "<=",
	ignoreCase: false,
	want: "\"<=\"",
},
&litMatcher{
	pos: position{line: 102, col: 38, offset: 2009},
	val: ">",
	ignoreCase: false,
	want: "\">\"",
},
&litMatcher{
	pos: position{line: 102, col: 44, offset: 2015},
	val: ">=",
	ignoreCase: false,
	want: "\">=\"",
},
	},
},
},
},
{
	name: "Literals",
	pos: position{line: 107, col: 1, offset: 2070},
	expr: &choiceExpr{
	pos: position{line: 108, col: 3, offset: 2087},
	alternatives: []interface{}{
&ruleRefExpr{
	pos: position{line: 108, col: 3, offset: 2087},
	name: "Number",
},
&ruleRefExpr{
	pos: position{line: 109, col: 3, offset: 2099},
	name: "String",
},
&ruleRefExpr{
	pos: position{line: 110, col: 3, offset: 2111},
	name: "Bool",
},
&ruleRefExpr{
	pos: position{line: 111, col: 3, offset: 2121},
	name: "Null",
},
	},
},
},
{
	name: "Number",
	pos: position{line: 114, col: 1, offset: 2132},
	expr: &actionExpr{
	pos: position{line: 114, col: 10, offset: 2143},
	run: (*parser).callonNumber1,
	expr: &seqExpr{
	pos: position{line: 114, col: 10, offset: 2143},
	exprs: []interface{}{
&ruleRefExpr{
	pos: position{line: 114, col: 10, offset: 2143},
	name: "Integer",
},
&zeroOrOneExpr{
	pos: position{line: 114, col: 18, offset: 2151},
	expr: &seqExpr{
	pos: position{line: 114, col: 20, offset: 2153},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 114, col: 20, offset: 2153},
	val: ".",
	ignoreCase: false,
	want: "\".\"",
},
&oneOrMoreExpr{
	pos: position{line: 114, col: 24, offset: 2157},
	expr: &ruleRefExpr{
	pos: position{line: 114, col: 24, offset: 2157},
	name: "DecimalDigit",
},
},
	},
},
},
&zeroOrOneExpr{
	pos: position{line: 114, col: 41, offset: 2174},
	expr: &ruleRefExpr{
	pos: position{line: 114, col: 41, offset: 2174},
	name: "Exponent",
},
},
	},
},
},
},
{
	name: "Integer",
	pos: position{line: 121, col: 1, offset: 2356},
	expr: &actionExpr{
	pos: position{line: 121, col: 12, offset: 2367},
	run: (*parser).callonInteger1,
	expr: &seqExpr{
	pos: position{line: 121, col: 12, offset: 2367},
	exprs: []interface{}{
&zeroOrOneExpr{
	pos: position{line: 121, col: 12, offset: 2367},
	expr: &charClassMatcher{
	pos: position{line: 121, col: 12, offset: 2367},
	val: "[+-]",
	chars: []rune{'+','-',},
	ignoreCase: false,
	inverted: false,
},
},
&oneOrMoreExpr{
	pos: position{line: 121, col: 18, offset: 2373},
	expr: &ruleRefExpr{
	pos: position{line: 121, col: 18, offset: 2373},
	name: "DecimalDigit",
},
},
	},
},
},
},
{
	name: "Exponent",
	pos: position{line: 126, col: 1, offset: 2457},
	expr: &seqExpr{
	pos: position{line: 126, col: 12, offset: 2470},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 126, col: 12, offset: 2470},
	val: "e",
	ignoreCase: true,
	want: "\"e\"i",
},
&zeroOrOneExpr{
	pos: position{line: 126, col: 17, offset: 2475},
	expr: &charClassMatcher{
	pos: position{line: 126, col: 17, offset: 2475},
	val: "[+-]",
	chars: []rune{'+','-',},
	ignoreCase: false,
	inverted: false,
},
},
&oneOrMoreExpr{
	pos: position{line: 126, col: 23, offset: 2481},
	expr: &ruleRefExpr{
	pos: position{line: 126, col: 23, offset: 2481},
	name: "DecimalDigit",
},
},
	},
},
},
{
	name: "DecimalDigit",
	pos: position{line: 128, col: 1, offset: 2498},
	expr: &charClassMatcher{
	pos: position{line: 128, col: 16, offset: 2515},
	val: "[0-9]",
	ranges: []rune{'0','9',},
	ignoreCase: false,
	inverted: false,
},
},
{
	name: "String",
	pos: position{line: 130, col: 1, offset: 2524},
	expr: &actionExpr{
	pos: position{line: 130, col: 10, offset: 2535},
	run: (*parser).callonString1,
	expr: &seqExpr{
	pos: position{line: 130, col: 10, offset: 2535},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 130, col: 10, offset: 2535},
	val: "\"",
	ignoreCase: false,
	want: "\"\\\"\"",
},
&zeroOrMoreExpr{
	pos: position{line: 130, col: 14, offset: 2539},
	expr: &choiceExpr{
	pos: position{line: 130, col: 16, offset: 2541},
	alternatives: []interface{}{
&seqExpr{
	pos: position{line: 130, col: 16, offset: 2541},
	exprs: []interface{}{
&notExpr{
	pos: position{line: 130, col: 16, offset: 2541},
	expr: &ruleRefExpr{
	pos: position{line: 130, col: 17, offset: 2542},
	name: "EscapedChar",
},
},
&anyMatcher{
	line: 130, col: 29, offset: 2554,
},
	},
},
&seqExpr{
	pos: position{line: 130, col: 33, offset: 2558},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 130, col: 33, offset: 2558},
	val: "\\",
	ignoreCase: false,
	want: "\"\\\\\"",
},
&ruleRefExpr{
	pos: position{line: 130, col: 38, offset: 2563},
	name: "EscapeSequence",
},
	},
},
	},
},
},
&litMatcher{
	pos: position{line: 130, col: 56, offset: 2581},
	val: "\"",
	ignoreCase: false,
	want: "\"\\\"\"",
},
	},
},
},
},
{
	name: "EscapedChar",
	pos: position{line: 135, col: 1, offset: 2704},
	expr: &charClassMatcher{
	pos: position{line: 135, col: 15, offset: 2720},
	val: "[\\x00-\\x1f\"\\\\]",
	chars: []rune{'"','\\',},
	ranges: []rune{'\x00','\x1f',},
	ignoreCase: false,
	inverted: false,
},
},
{
	name: "EscapeSequence",
	pos: position{line: 137, col: 1, offset: 2738},
	expr: &choiceExpr{
	pos: position{line: 137, col: 18, offset: 2757},
	alternatives: []interface{}{
&ruleRefExpr{
	pos: position{line: 137, col: 18, offset: 2757},
	name: "SingleCharEscape",
},
&ruleRefExpr{
	pos: position{line: 137, col: 37, offset: 2776},
	name: "UnicodeEscape",
},
	},
},
},
{
	name: "SingleCharEscape",
	pos: position{line: 139, col: 1, offset: 2793},
	expr: &charClassMatcher{
	pos: position{line: 139, col: 20, offset: 2814},
	val: "[\"\\\\/bfnrt]",
	chars: []rune{'"','\\','/','b','f','n','r','t',},
	ignoreCase: false,
	inverted: false,
},
},
{
	name: "UnicodeEscape",
	pos: position{line: 141, col: 1, offset: 2829},
	expr: &seqExpr{
	pos: position{line: 141, col: 17, offset: 2847},
	exprs: []interface{}{
&litMatcher{
	pos: position{line: 141, col: 17, offset: 2847},
	val: "u",
	ignoreCase: false,
	want: "\"u\"",
},
&ruleRefExpr{
	pos: position{line: 141, col: 21, offset: 2851},
	name: "HexDigit",
},
&ruleRefExpr{
	pos: position{line: 141, col: 30, offset: 2860},
	name: "HexDigit",
},
&ruleRefExpr{
	pos: position{line: 141, col: 39, offset: 2869},
	name: "HexDigit",
},
&ruleRefExpr{
	pos: position{line: 141, col: 48, offset: 2878},
	name: "HexDigit",
},
	},
},
},
{
	name: "HexDigit",
	pos: position{line: 143, col: 1, offset: 2890},
	expr: &charClassMatcher{
	pos: position{line: 143, col: 12, offset: 2903},
	val: "[0-9a-f]i",
	ranges: []rune{'0','9','a','f',},
	ignoreCase: true,
	inverted: false,
},
},
{
	name: "Bool",
	pos: position{line: 145, col: 1, offset: 2916},
	expr: &choiceExpr{
	pos: position{line: 145, col: 8, offset: 2925},
	alternatives: []interface{}{
&actionExpr{
	pos: position{line: 145, col: 8, offset: 2925},
	run: (*parser).callonBool2,
	expr: &litMatcher{
	pos: position{line: 145, col: 8, offset: 2925},
	val: "true",
	ignoreCase: false,
	want: "\"true\"",
},
},
&actionExpr{
	pos: position{line: 145, col: 38, offset: 2955},
	run: (*parser).callonBool4,
	expr: &litMatcher{
	pos: position{line: 145, col: 38, offset: 2955},
	val: "false",
	ignoreCase: false,
	want: "\"false\"",
},
},
	},
},
},
{
	name: "Null",
	pos: position{line: 147, col: 1, offset: 2988},
	expr: &actionExpr{
	pos: position{line: 147, col: 8, offset: 2997},
	run: (*parser).callonNull1,
	expr: &litMatcher{
	pos: position{line: 147, col: 8, offset: 2997},
	val: "null",
	ignoreCase: false,
	want: "\"null\"",
},
},
},
{
	name: "_",
	displayName: "\"whitespace\"",
	pos: position{line: 149, col: 1, offset: 3027},
	expr: &zeroOrMoreExpr{
	pos: position{line: 149, col: 19, offset: 3045},
	expr: &charClassMatcher{
	pos: position{line: 149, col: 19, offset: 3045},
	val: "[ \\n\\t\\r]",
	chars: []rune{' ','\n','\t','\r',},
	ignoreCase: false,
	inverted: false,
},
},
},
{
	name: "EOF",
	pos: position{line: 151, col: 1, offset: 3059},
	expr: &notExpr{
	pos: position{line: 151, col: 8, offset: 3066},
	expr: &anyMatcher{
	line: 151, col: 9, offset: 3067,
},
},
},
	},
}
func (c *current) onInput1(expr interface{}) (interface{}, error) {

    cntCodeBlocks++
    return expr, nil
}

func (p *parser) callonInput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["expr"])
}

func (c *current) onArguments1(arguments interface{}) (interface{}, error) {

  if let(arguments) > 0 {
    return "(" + strings.Join(arguments, ",") + ")"
  } else {
    return "()"
  }
}

func (p *parser) callonArguments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArguments1(stack["arguments"])
}

func (c *current) onArgumentList1(head, tail interface{}) (interface{}, error) {

  result := [head];
  for _, v := range len(tail) {
    result = append(result, v[3])
  }
  return result
}

func (p *parser) callonArgumentList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList1(stack["head"], stack["tail"])
}

func (c *current) onVariable1(name interface{}) (interface{}, error) {

  return "\"" + name + "\""
}

func (p *parser) callonVariable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable1(stack["name"])
}

func (c *current) onIdentifierVariable1(name interface{}) (interface{}, error) {

  return name;
}

func (p *parser) callonIdentifierVariable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierVariable1(stack["name"])
}

func (c *current) onIdentifier1(name interface{}) (interface{}, error) {

  return name
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["name"])
}

func (c *current) onIdentifierName1(start, parts interface{}) (interface{}, error) {

      return start + parts.join("");
    
}

func (p *parser) callonIdentifierName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1(stack["start"], stack["parts"])
}

func (c *current) onExpr1(first, rest interface{}) (interface{}, error) {

    cntCodeBlocks++
    return eval(first, rest), nil
}

func (p *parser) callonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr1(stack["first"], stack["rest"])
}

func (c *current) onTerm1(first, rest interface{}) (interface{}, error) {

    cntCodeBlocks++
    return eval(first, rest), nil
}

func (p *parser) callonTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm1(stack["first"], stack["rest"])
}

func (c *current) onFactor2(expr interface{}) (interface{}, error) {

    cntCodeBlocks++
    return expr, nil
}

func (p *parser) callonFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFactor2(stack["expr"])
}

func (c *current) onFactor8(number interface{}) (interface{}, error) {

    cntCodeBlocks++
    return number, nil
}

func (p *parser) callonFactor8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFactor8(stack["number"])
}

func (c *current) onAddOp1() (interface{}, error) {

    cntCodeBlocks++
    return string(c.text), nil
}

func (p *parser) callonAddOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddOp1()
}

func (c *current) onMulOp1() (interface{}, error) {

    cntCodeBlocks++
    return string(c.text), nil
}

func (p *parser) callonMulOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMulOp1()
}

func (c *current) onCompOp1() (interface{}, error) {

  cntCodeBlocks++
  return c.text, nil
}

func (p *parser) callonCompOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompOp1()
}

func (c *current) onNumber1() (interface{}, error) {

    // JSON numbers have the same syntax as Go's, and are parseable using
    // strconv.
    cntCodeBlocks++
    return strconv.ParseFloat(string(c.text), 64)
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onInteger1() (interface{}, error) {

    cntCodeBlocks++
    return strconv.Atoi(string(c.text))
}

func (p *parser) callonInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onString1() (interface{}, error) {

    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return strconv.Unquote(string(c.text))
}

func (p *parser) callonString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onBool2() (interface{}, error) {
 return true, nil 
}

func (p *parser) callonBool2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBool2()
}

func (c *current) onBool4() (interface{}, error) {
 return false, nil 
}

func (p *parser) callonBool4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBool4()
}

func (c *current) onNull1() (interface{}, error) {
 return nil, nil 
}

func (p *parser) callonNull1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}


var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}


// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}


// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}


// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) { 
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) { 
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match


	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict


	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr        
type notExpr expr        
type zeroOrOneExpr expr  
type zeroOrMoreExpr expr 
type oneOrMoreExpr expr  

type ruleRefExpr struct {
	pos  position
	name string
}


type stateCodeExpr struct {
	pos position
	run func(*parser) error
}


type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position 

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state: make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}


func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}


// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}


// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}


func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}


	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt


	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}


func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}


func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}


	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}


func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}


func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}


	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}



